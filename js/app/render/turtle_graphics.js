// Turtle_graphics.js is a 3D LOGO-style "turtle" wrapper for three.js used
// for LSystem drawing.

// BUT ALSO LOOK AT THIS:
//http://www.akdillon.net/pages/classes/cs493/dillon_proj2_final/docs/lsys.html

// Turtle wrapper for three.js
function Turtle(sc, mat, loc, U, L, H) {
    // Call parent constructor
    THREE.Object3D.call(this);
    var heading = new THREE.Vector3(0,0,1); // Turtle starts heading in Z dir

    // Turtle stack used to save states
    var stack = [];

    // Rate of turtle movement
    var rate = 1;

    // Diameter of drawn cylinder
    var width = 1;

    // THREE.js stuff
    var scene = sc;
    var material = mat;

}
// Turtle inherits Object3D
Turtle.prototype = new THREE.Object3D();

// Correct constructor pointer
Turtle.prototype.constructor = Turtle;

/* Turtle actions */
// Move turtle forward, drawing a line
Turtle.prototype._F = function(time) {
    /* DRAW WITH THREE.js */
    // Create geometry
    // TODO: Taper width?
    var geo = new THREE.CylinderGeometry(width, width, time*this.rate);
    var mesh = new THREE.Mesh(geo, this.material);

    // Move in to position, assuming cylinder is oriented y+ w/ axis at center
    var heading = new THREE.Vector3(0,0,1);
    heading.applyEuler(this.rotation);
    var pos = new THREE.Vector3;
    pos.addVectors(
        this.state.location, heading.multiplyScalar(0.5*time*this.rate);
    mesh.position = pos;
    mesh.rotation = this.rotation;
    scene.add(mesh);

    // Move turtle to new position
    this.position.add(heading.multiplyScalar(time*this.rate));

}
// Move turtle forward, not drawing a line
Turtle.prototype._f = function() {
    // Move turtle to new position
    this.position.add(heading.multiplyScalar(time*this.rate));

}
// Rotate around the U axis ("up"), the local y axis
Turtle.prototype._+ = function(deg) {
    this.rotation.y = deg;

}
// Rotate around the L axis ("left"), the local x axis
Turtle.prototype._& = function(deg) {
    this.rotation.x = deg;

}
// Rotate around the H axis ("heading"), the local z axis
Turtle.prototype._/ = function(deg) {
    this.rotation.z = deg;

}
// ?? Sets line width / diameter ??
Turtle.prototype._! = function(width) {
    this.width = width;

}
// Pushes state (object3d info) on to stack
Turtle.prototype._[ = function() {
    // There's prob a better way but for now imma store values sue me
    var state = {position: this.position, rotation: this.rotation};
    this.stack.push(state);

}

// Pops state from stack
Turtle.prototype._] = function() {
    var state = this.stack.pop();

    // ERROR: Stack empty
    if (state == null) {
        console.error('ERROR: Pop called on empty turtle stack!');
        return;

    }
    this.position = stack.position;
    this.rotation = stack.rotation;

}

/* Turtle methods */
// Takes a list of actions (generated by l-system, maybe?) and runs them
Turtle.prototype.run(actions) {
    // Actions are current free of context, use "call" to run them on this
    // instance
    for (var a in actions)
        a.call(this);

    // Consider resetting position?

}
